
---------------------------------------------------------------------------------------------------

program_name file_name
    # Nombre del archivo de entrada es SIEMPRE 'input'
    # Puede ser 'file' para un archivo, o 'stdout' para la salida estándar
    file "nombre_del_archivo" + input -> output     # Crea el archivo "nombre_del_archivo" concatenado con el valor de input
                                                    # y lo guarda en output
    # Si quisieramos usar salida estándar:
    # STDOUT -> output

    # Ejemplo para entender "nombre_del_archivo" + input
    #   ./programa archivo1.csv archivo2.csv
    #   nombre_del_archivo-archivo1.csv nombre_del_archivo-archivo2.csv 

    longest line                        # Devuelve la línea más larga (?)
    sort column 3                       # Ordena por la tercer columna
    row contains "string"               # Devuelve las filas que contienen "string" (filtro)

    output: change separator from "," to ";"    # Cambia el separador
    input: row number 9                         # Devuelve la fila 9
            | each column contains "string"     # Devuelve las columnas que contienen "string"
                -> col                          # La guarda en la variable col
                | each row contains "string"
                    -> fila                     # La guarda en la variable fila
                    | fila.toLower()


    # eq: Equals (==)
    # neq: Not equals (!=)
    # lt: Less than (<)
    # gt: Greater than (>)
    # le: Less equal (<=)
    # ge: Greater equal (>=)
    # and, or y not (se comportan como conocemos)

    "string1" eq "string2"              # Devuelve si string1 está compuesto por los mismos caracteres que string2
    "number1" eq "number2"              # Devuelve si number1 está compuesto por los mismos dígitos que number2
    

    output: row number 2                                # En la fila 2 del archivo
            | column number [2, 5]                      # Tomar las columnas 2 y 5
                -> [left, right]                        # Las llama left (columna 2) y right (columna 5)
                | if left lt 55 and right gt 4522 then  # Si cumplen este condicional
                    | [right, left] -> [left, right]    # Las intercambia
                | else                                  # Sino
                    | left * 2 -> left                  # Multiplica los valores por una constante
                    | right * 5 -> right

end_program

---------------------------------------------------------------------------------------------------

Precedencia de operadores:

() []           # (): Asociatividad; []: Listas                         # Left to right
not             # not: Lógico                                           # Right to left
++ --           # ++: Concatenación; --: Resta de strings               # Left to right
* / %           # Aritméticos                                           # Left to right
+ -             # Aritméticos                                           # Left to right
gt ge lt le     # Relacionales                                          # Left to right
eq neq          # Relacionales                                          # Left to right
and             # Lógico                                                # Left to right
or              # Lógico                                                # Left to right
->              # Asignación                                            # Left to right
|               # Pipe                                                  # Left to right

"string" ++ "string" --> "stringstring"
"string" -- "trin" --> "sg"
"string" - 5 --> "s"
"string" + 5 --> Error
"string" ++ 5 --> "string5"
"string" * 5 --> "stringstringstringstringstring"

---------------------------------------------------------------------------------------------------

./pepito mi_archivo.csv mi_otro_archivo.csv

---------------------------------------------------------------------------------------------------

CSV ejemplo:

John,Doe,120 jefferson st.,Riverside, NJ, 08075
Jack,McGinnis,220 hobo Av.,Phila, PA,09119
"John ""Da Man""",Repici,120 Jefferson St.,Riverside, NJ,08075
Stephen,Tyler,"7452 Terrace ""At the Plaza"" road",SomeTown,SD, 91234
,Blankman,,SomeTown, SD, 00298
"Joan ""the bone"", Anne",Jet,"9th, at Terrace plc",Desert City,CO,00123


---------------------------------------------------------------------------------------------------

# R3.1 [Aceptar] Un programa que lea un archivo y lo imprima sin modificación.
fn r31
    file "nombre_del_archivo" -> input

    STDOUT -> output

    input > output
end

# R3.2 [Aceptar] Un programa que lea un archivo y se quede con una parte del
# mismo.
fn r32
    file "nombre_del_archivo" -> input

    file -> output  # Anonymous file (must be returned)

    input: row [2, 5, 7]  > output # Keeps rows 2, 5 and 7
end

# R3.3 [Aceptar] Un programa que filtre ciertas líneas de un archivo según un
# predicado.
fn r33
    file "nombre_del_archivo" -> input

    STDOUT -> output

    input: separator ','

    input:  each row do -> fila
                each column contains "string" do
                    fila >> output  # Append

    output: column [2, 3] -> [left, right]
            | if left eq right then
                left + right -> left
              else
                [left, right] -> [right, left]
end

# R3.4 [Aceptar] Un programa que aplique una función aritmética sobre cierto 
# campo del archivo de entrada.
fn r34
    file "nombre_del_archivo" -> input

    STDOUT -> output

    input > output

    output: each row do -> fila
                if fila is number then
                    fila + 1 -> fila
                else 
                    fila -> fila
end

# R3.5 [Aceptar] Un programa que concatene más de 2 archivos.
fn r35
    file "nombre_del_archivo" -> input1
    file "nombre_del_archivo2" -> input2

    file "archivo_de_salida" -> output

    input1 ++ input2 > output
end

# R3.6 [Aceptar] Un programa que multiplique (copie) el contenido de un archivo
# N veces.
fn r36(n)
    file "nombre_del_archivo" -> input

    file "archivo_de_salida" -> output

    input * n -> output
end

# R3.7 [Aceptar] Un programa que separe cada columna de entrada de un CSV/TSV
# en líneas individuales.
fn r37
    file "nombre_del_archivo" -> input

    file "archivo_de_salida" -> output

    input > output

    output: separator from [',', '\t'] to '\n'
end

# R3.8 [Aceptar] Un programa que agrupe 5 líneas de entrada en 1 de salida
# separada por comas.
fn r38
    file "nombre_del_archivo" -> input

    file "archivo_de_salida" -> output

    input: row [1..5] > output
    output: separator from '\n' to ','
end

# R3.9 [Aceptar] Un programa que aplique una transformación diferente sobre
# cada columna de entrada.
fn r39
    file "nombre_del_archivo" -> input

    file "archivo_de_salida" -> output

    input: separator '\t'
    input > output

    output: each column do -> col
                if col is string then
                    col ++ " [STR]" -> col
                else
                    col * 2.5 -> col
end

# R3.10 [Aceptar] Un programa que busque líneas que contengan “ERROR” en todos
# los archivos de una carpeta.
fn r310
    file "path_to_folder/" -> input

    STDOUT -> output

    each input contains "ERROR" do -> file_name
        file_name >> output
end

# R3.11 [Rechazar] Un programa que lea de un archivo que no existe.
fn r311
    file "non_existent" -> input

    # In backend
end

# R3.12 [Rechazar] Un programa que aplique una transformación sobre una columna
# que no existe en un CSV.
fn r312
    file "nombre_del_archivo" -> input

    file "archivo_de_salida" -> output

    input: separator ','
    input > output
    
    output: column 4321345342 -> col
        col + 1 -> col
        # In backend
end

# R3.13 [Rechazar] Un programa mal formado
fn r313
    file "nombre_del_archivo" -> input

    # Missing "output"

    input: row [1..5] > output
    output: separator from '\n' to ','
end

# R3.14 [Rechazar] Un programa que realice una operación entre tipos 
# incompatibles.
fn r314
    file "nombre_del_archivo" -> input
    file "archivo_de_salida" -> output

    input: separator ':'

    input: row [1..5] > output
    output: column 5
                "str" + 1
end

# R3.15 [Rechazar] Un programa que acceda a una posición dentro de un string
# fuera de rango.
fn r315
    file "nombre_del_archivo" -> input
    file "archivo_de_salida" -> output

    input: separator ' '

    input: row 1
            column 1 -> field   # Treats field as string
                filed[5123]
end
---------------------------------------------------------------------------------------------------